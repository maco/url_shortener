# URL Shortener

## Setup

### Prerequisites

- Ensure Elixir 1.12 is installed.
- Ensure Postgres 13 is installed.
- If your Postgres installation doesn't have a `postgres` user with password `postgres`, update the configuration in `config/dev.exs` to use the correct credentials for your system.

### Get dependencies and set up database
- `mix deps.get`
- `mix ecto.create`
- `mix ecto.migrate`

## Usage

1. `mix phx.server`
1. Navigate to http://localhost:4000/
1. Input a URL and press "shortenify!" button

If you input an invalid URL (missing the "http(s)://" or having _only_ the "http(s)://"), you will get an error.

If you input a URL that has already been shortened, you won't get a new short URL for it. You'll get the same one as before.

If you copy the URL provided by the app into a browser window and hit enter, you'll be redirected to the website you initially put in.

## Testing

`mix test` will run all tests

## Decisions

Some things may seem unnecessary, like a `change_url()` function, but a future use-case could involve users being able to log in and manage the short URLs they've created, changing where they point.

In that case, it might also make sense to get rid of the check that prevents the same URL being shortened twice. Perhaps it should be saved separately for different users so they can have separate usage statistics.

I didn't include pre-commit hooks because I've usually done that using the Python pre-commit package, and adding a Python dependency seemed excessive. I did put the checks into GitHub actions on PRs.

I can use React, but there's a user experience tradeoff between fast load times and wooshy special effects. There is nothing a URL shortener does that requires (or even benefits from) special effects.

I put `/x/` in front of the slug to leave room for potential enhancements like user dashboards. (And if those existed, then maybe a JS framework would be justified.)
